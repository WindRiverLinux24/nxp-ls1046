        NXP LS1046A-RDB Board Support Package


1. About this document
======================
This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River Linux
and the wr-kernel layer.


Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.


Building the nxp-ls1046 layer
-----------------------------
This layer and wr-kernel layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.


License
-------
Copyright (C) 2024 Wind River Systems, Inc.

Source code included in tree for individual recipes is under the LICENSE
stated in each recipe (.bb file) unless other stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        N         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP
along with patch descriptions use git whatchanged on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

  # cd tmp-glibc/work-shared/<bsp_name>/kernel-source
  # git whatchanged v6.6/standard/base..v6.6/standard/nxp-sdk-6.6/nxp-soc


4. Boot Instructions
====================

The typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store respectively
your network configuration details and kernel command line. In order to
TFTP a kernel, you need at a minimum to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr
	- eth1addr

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "kernelfile" variable. Don't forget that if you
want these values to be available after a power cycle you will need to run
the saveenv command.

Typically convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyS0 at 115200 baud. For the DTB
address, 0x90000000 was used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value
of 0x81000000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off \
console=$consoledev,$baudrate $othbootargs;tftp $kernel_addr_r $kernelfile; \
tftp $fdt_addr_r $fdtfile;booti $kernel_addr_r - $fdt_addr_r
ethaddr=00:04:9F:02:00:FD
eth1addr=00:04:9F:02:01:FD
eth2addr=00:04:9F:02:02:FD
kernel_addr_r=0x81000000
fdt_addr_r=0x90000000
gatewayip=192.168.1.1
netmask=255.255.255.0
ipaddr=192.168.1.100
serverip=192.168.1.2
netdev=eth0
kernelfile=Image
fdtfile=fsl-ls1046-rdb-sdk.dtb
rootpath=/tftpboot/rootfs
consoledev=ttyS0
baudrate=115200
othbootargs=earlycon=uart8250,mmio,0x21c0500

4.2 Booting from SPI flash
--------------------------

4.2.1 On-Board SPI Flash vbank Configuration

The LS1046ARDB provides two QSPI flash memories (part number: S25FS512SDSMFI011) 
for storing images (RCW/UBoot/kernel/PPA/FMan microcode):
 - Flash memory connected to chip select 0 (CS0): Represents the default virtual bank (bank 0)
 - Flash memory connected to chip select 1 (CS1): Represents the alternative virtual bank (bank 4)
Below description shows the memory addresses (memory map) for storing board configuration data on 
virtual bank 0 and virtual bank 4.

4.2.2 NXP bootloader image

WRLinux product provides a solution to build bootloader image which contains U-Boot, RCW, etc.
Please refer to section 6 to build NXP bootloader image.

After building, the bootloader image(firmware_ls1046ardb_uboot_<boot-type>.img) is generated
in directory <building-path>/build/tmp-glibc/deploy/images/nxp-ls1046.

and burn it to the target board under the U-Boot prompt using the commands below:

=> tftp a0000000 firmware_ls1046ardb_qspiboot.img
=> sf probe 0:1
=> sf erase 0 +$filesize && sf write a0000000 0 $filesize

Then use

=> cpld reset altbank

to switch to vbank4.

4.2.3 Set board switch

Set dipsw as below for booting from flash0
SW3[1:8] 		SW4[1:8] 		SW5[1:8]
01000110 		00111011 		00100010

Set dipsw as below for booting from flash1
SW3[1:8] 		SW4[1:8] 		SW5[1:8]
01001110 		00111011 		00100010

4.3 NAND Flash Root File System
-------------------------------

4.3.1 Generate the boot image

Configure your project with the following options to enable necessary kernel
options:
        --templates feature/yaffs2-utils

After build, program the image into flash with following command:
For ubifs filesystems:
	# flash_erase /dev/mtd0 0 0
	# ubiattach /dev/ubi_ctrl -m 0
	# ubimkvol /dev/ubi0 -N root -s 480MiB
	# mkdir /mnt/ubifs
	# mount -t ubifs ubi0:root /mnt/ubifs
	# tar xfj wrlinux-image-glibc-std-nxp-ls1046.tar.bz2 --numeric-owner -C /mnt/ubifs/
	# umount /mnt/ubifs/

The followings are for YAFFS2 filesystem:

	# flash_erase /dev/mtd0 0 0
	# mkdir /mnt/yaffs2
	# mount -t yaffs /dev/mtdblock0 /mnt/yaffs2
	# tar xfj wrlinux-image-glibc-std-nxp-ls1046.tar.bz2 --numeric-owner -C /mnt/yaffs2/
	# umount /mnt/yaffs2/

NOTE: Before writing to the flash memory you need to know its layout, you can
get this kind information by running 'cat /proc/mtd' on your target. please
ensure that an appropriate file system is created to fit the available space.

4.3.2 Deployment
----------------

After loading the kernel, pass kernel arguments as shown:

	ubi.mtd=0 root=ubi0:root rw rootfstype=ubifs console=ttyS0,115200

	or: root=/dev/mtdblock0 rw rootfstype=yaffs console=ttyS0,115200

4.4 Creating Partitioned Images(WIC)
------------------------------------
User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command
generates partitioned images from existing OpenEmbedded build artifacts.
User can refer to the below URL to get more WIC details:

https://docs.yoctoproject.org/singleindex.html#creating-partitioned-images-using-wic

This BSP supports disk images for SD card.
After build the project, user will get a WIC image under the directory
tmp-glibc/deploy/images/<bsp name>/ ,such as:

WIC image for SD card:
tmp-glibc/deploy/images/nxp-ls1046/wrlinux-image-std-nxp-ls1046.wic

Then user can write the output image to a SD card. WIC image contains kernel,
dtb, rootfs and bootloader(if customer builds it by following the section 6).

To change default booting configuration in uboot, user can overwrite following
variable in uboot and save to SD by saveenv command:

- kernelfile, define kernel image file name.
- fdtfile, define device-tree image file name.
- othbootargs, define additional booting parameters pass to kernel.

4.4.1 Burn images to SD card
----------------------------

To burn images to SD card, user needs to follow two steps:

1) Generate WIC image with NXP bootloader

WRLinux product provides a solution to build WIC image with NXP bootloader.
Please refer to section 6 for the detailed description.
After building, the WIC image(wrlinux-image-std-nxp-ls1046.wic) is generated
in directory <building-path>/build/tmp-glibc/deploy/images/nxp-ls1046.

2) Burn WIC image

# dd if=wrlinux-image-std-nxp-ls1046.wic of=/dev/your_sd_dev

4.4.2 Set board switch
----------------------

Board can boot from SD card by setting sw4[1:8] as '00111011' and sw5[1:8] as '00100000'.
After power up, if a bootable SD card inserted, then system will boot from SD
card.


5. Features
===========

5.1 PTP by ptp4l
----------------
1) To configure one machine as master:

    root@nxp-ls1046:~# ptp4l -i eth0 -p /dev/ptp0 -m
    ptp4l[175.037]: selected /dev/ptp0 as PTP clock
    ptp4l[175.038]: driver changed our HWTSTAMP options
    ptp4l[175.038]: tx_type   1 not 1
    ptp4l[175.038]: rx_filter 1 not 12
    ptp4l[175.038]: port 1: INITIALIZING to LISTENING on INITIALIZE
    ptp4l[175.038]: port 0: INITIALIZING to LISTENING on INITIALIZE
    ptp4l[175.038]: port 1: link up
    ptp4l[182.126]: port 1: LISTENING to MASTER on ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES
    ptp4l[182.126]: selected best master clock 720ff8.fffe.2e3c31
    ptp4l[182.126]: assuming the grand master role

2) Another as slave:

    root@nxp-ls1046:~# ptp4l -i eth0 -p /dev/ptp0 -m
    ptp4l[233.257]: selected /dev/ptp0 as PTP clock
    ptp4l[233.258]: driver changed our HWTSTAMP options
    ptp4l[233.258]: tx_type   1 not 1
    ptp4l[233.258]: rx_filter 1 not 12
    ptp4l[233.258]: port 1: INITIALIZING to LISTENING on INITIALIZE
    ptp4l[233.258]: port 0: INITIALIZING to LISTENING on INITIALIZE
    ptp4l[233.258]: port 1: link up
    ptp4l[233.816]: port 1: new foreign master 22fa84.fffe.480bac-1
    ptp4l[237.816]: selected best master clock 22fa84.fffe.480bac
    ptp4l[237.816]: port 1: LISTENING to UNCALIBRATED on RS_SLAVE
    ptp4l[239.815]: master offset -5567669943 s0 freq      +0 path delay     18980
    ptp4l[240.815]: master offset -5567678538 s1 freq   -8595 path delay     20350
    ptp4l[241.815]: master offset     -11555 s2 freq  -20150 path delay     20350
    ptp4l[241.815]: port 1: UNCALIBRATED to SLAVE on MASTER_CLOCK_SELECTED
    ptp4l[242.815]: master offset      23910 s2 freq  +11849 path delay     20350
    ptp4l[243.815]: master offset       9475 s2 freq   +4587 path delay     20350
    ptp4l[244.815]: master offset       7625 s2 freq   +5579 path delay     20350
    ptp4l[245.815]: master offset     -23970 s2 freq  -23728 path delay     21720
    ptp4l[246.815]: master offset      15980 s2 freq   +9031 path delay     20350
    ptp4l[247.815]: master offset       6085 s2 freq   +3930 path delay     20715
    ptp4l[248.816]: master offset      -1185 s2 freq   -1515 path delay     20715
    ptp4l[249.816]: master offset       5018 s2 freq   +4333 path delay     18982
    ptp4l[250.816]: master offset      -8420 s2 freq   -7600 path delay     20715
    ptp4l[251.816]: master offset     -20343 s2 freq  -22049 path delay     19848
    ptp4l[252.816]: master offset      22082 s2 freq  +14273 path delay     19848
    ptp4l[253.816]: master offset     -18512 s2 freq  -19696 path delay     21217

5.2 kexec/kdump
---------------

To build the boot or capture kernel, use the following option with the configure
command for your project:

     --templates feature/kexec feature/kdump

To reserve a memory region for the capture kernel, pass "crashkernel=512M"
via the U-Boot command line.

NOTES:
1. Use Image as a secondary kernel. It can be found in the directory
   tmp-glibc/deploy/images/nxp-ls1046/Image

2. 512 MB (the size of the memory reserved for crash kernel) is the
   recommended amount of memory. If you add more features to the kernel, you
   can increase this value to accommodate the capture kernel.

3. Kdump
   SMP is unsupported in the 2nd kernel, so user needs to append argument "maxcpus=1"
   in the 2nd kernel bootargs.
   Because the 2nd kernel runs under limited resource, it should not work as a
   "replacement" kernel. In contrast, the only purpose of the 2nd kernel is to collect
   the crashing information of the 1st kernel.

4. Same with Layerscape Linux Distribution POC, DPAA1 should be compiled out while creating
   the image for dump-capture 2nd kernel. With "CONFIG_FSL_SDK_DPAA_ETH=n" in the kernel
   .config setting to disable DPAA1, user can choose PCIe device "CONFIG_E1000E=y" as a
   replacement to make NFS working.
   Please refer to the chapter "kdump/kexec User Manual" of below link:
   https://docs.nxp.com/bundle/UG10081_LLDP_L6.1.55_2.2.0/page/topics/kdump_kexec_user_manual.html

For more detailed information about kdump, please refer to
Documentation/kdump/kdump.txt in the kernel source tree.

5.3 DPDK
--------

5.3.1 Install DPDK
------------------

Refer to the README file in dpdk feature directory(layers/wrlinux/templates/feature/dpdk).

5.4 LS1026A
-----------

Enable LS1026A mode by setting sw3[2] as 0.
sw3[2] definition for LS1046A processor as below:
 0: Disable cores 3 and 4
 1: Enable all cores (default value)

Note:
When booting up system with LS1026A mode, please use fsl-ls1026a-rdb-sdk.dtb file.


6. Build Bootloader
===================

Because of license limitation, the NXP ls1046 bootloader is not supported on WRLinux product.
But the necessary recipe files of building bootloader have been integrated into WRLinux product. In this way,
the customers can build bootloader for NXP ls1046 platform based on WRLinux product by themselves.
To build bootloader image for NXP ls1046 platform, it only needs to add below contents in local.conf file,
and then build WRLinux image as usual.

	BB_NO_NETWORK = '0'
	ACCEPT_FSL_EULA = "1"
	CUSTOMER_BUILD_BOOTLOADER = "1"
	CUSTOMER_RECIPES:meta-qoriq += 'secure-boot-qoriq'
	CUSTOMER_RECIPES:meta-qoriq += 'u-boot-qoriq'
	CUSTOMER_RECIPES:meta-qoriq += 'qoriq-atf'
	CUSTOMER_RECIPES:freescale-layer += 'fm-ucode'
	CUSTOMER_RECIPES:freescale-layer += 'qe-ucode'
	CUSTOMER_RECIPES:freescale-layer += 'qoriq-cst-native'
	CUSTOMER_RECIPES:freescale-layer += 'uefi'
	CUSTOMER_RECIPES:freescale-layer += 'rcw'
	CUSTOMER_RECIPES:freescale-layer += 'ls2-phy'

Note: If customers want to integrate bootloader into their own product, they MUST consult NXP and their own
      legal department.
